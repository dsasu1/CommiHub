{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { forwardRef, EventEmitter, Component, ChangeDetectionStrategy, Input, Output, NgModule } from '@angular/core';\nimport * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i1 from 'primeng/ripple';\nimport { RippleModule } from 'primeng/ripple';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\n\nconst _c0 = function (a1, a2) {\n  return {\n    \"p-button-icon\": true,\n    \"p-button-icon-left\": a1,\n    \"p-button-icon-right\": a2\n  };\n};\n\nfunction ToggleButton_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"span\", 3);\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵclassMap(ctx_r0.checked ? ctx_r0.onIcon : ctx_r0.offIcon);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction2(3, _c0, ctx_r0.iconPos === \"left\", ctx_r0.iconPos === \"right\"));\n  }\n}\n\nconst _c1 = function (a1, a2, a3) {\n  return {\n    \"p-button p-togglebutton p-component\": true,\n    \"p-button-icon-only\": a1,\n    \"p-highlight\": a2,\n    \"p-disabled\": a3\n  };\n};\n\nconst TOGGLEBUTTON_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => ToggleButton),\n  multi: true\n};\nlet ToggleButton = /*#__PURE__*/(() => {\n  class ToggleButton {\n    constructor(cd) {\n      this.cd = cd;\n      this.iconPos = 'left';\n      this.onChange = new EventEmitter();\n      this.checked = false;\n\n      this.onModelChange = () => {};\n\n      this.onModelTouched = () => {};\n    }\n\n    toggle(event) {\n      if (!this.disabled) {\n        this.checked = !this.checked;\n        this.onModelChange(this.checked);\n        this.onModelTouched();\n        this.onChange.emit({\n          originalEvent: event,\n          checked: this.checked\n        });\n        this.cd.markForCheck();\n      }\n    }\n\n    onBlur() {\n      this.onModelTouched();\n    }\n\n    writeValue(value) {\n      this.checked = value;\n      this.cd.markForCheck();\n    }\n\n    registerOnChange(fn) {\n      this.onModelChange = fn;\n    }\n\n    registerOnTouched(fn) {\n      this.onModelTouched = fn;\n    }\n\n    setDisabledState(val) {\n      this.disabled = val;\n      this.cd.markForCheck();\n    }\n\n    get hasOnLabel() {\n      return this.onLabel && this.onLabel.length > 0;\n    }\n\n    get hasOffLabel() {\n      return this.onLabel && this.onLabel.length > 0;\n    }\n\n  }\n\n  ToggleButton.ɵfac = function ToggleButton_Factory(t) {\n    return new (t || ToggleButton)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n  };\n\n  ToggleButton.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: ToggleButton,\n    selectors: [[\"p-toggleButton\"]],\n    hostAttrs: [1, \"p-element\"],\n    inputs: {\n      onLabel: \"onLabel\",\n      offLabel: \"offLabel\",\n      onIcon: \"onIcon\",\n      offIcon: \"offIcon\",\n      ariaLabelledBy: \"ariaLabelledBy\",\n      disabled: \"disabled\",\n      style: \"style\",\n      styleClass: \"styleClass\",\n      inputId: \"inputId\",\n      tabindex: \"tabindex\",\n      iconPos: \"iconPos\"\n    },\n    outputs: {\n      onChange: \"onChange\"\n    },\n    features: [i0.ɵɵProvidersFeature([TOGGLEBUTTON_VALUE_ACCESSOR])],\n    decls: 4,\n    vars: 12,\n    consts: [[\"role\", \"checkbox\", \"pRipple\", \"\", 3, \"ngClass\", \"ngStyle\", \"click\", \"keydown.enter\"], [3, \"class\", \"ngClass\", 4, \"ngIf\"], [1, \"p-button-label\"], [3, \"ngClass\"]],\n    template: function ToggleButton_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵlistener(\"click\", function ToggleButton_Template_div_click_0_listener($event) {\n          return ctx.toggle($event);\n        })(\"keydown.enter\", function ToggleButton_Template_div_keydown_enter_0_listener($event) {\n          return ctx.toggle($event);\n        });\n        i0.ɵɵtemplate(1, ToggleButton_span_1_Template, 1, 6, \"span\", 1);\n        i0.ɵɵelementStart(2, \"span\", 2);\n        i0.ɵɵtext(3);\n        i0.ɵɵelementEnd()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵclassMap(ctx.styleClass);\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction3(8, _c1, ctx.onIcon && ctx.offIcon && !ctx.hasOnLabel && !ctx.hasOffLabel, ctx.checked, ctx.disabled))(\"ngStyle\", ctx.style);\n        i0.ɵɵattribute(\"tabindex\", ctx.disabled ? null : \"0\")(\"aria-checked\", ctx.checked);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.onIcon || ctx.offIcon);\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate(ctx.checked ? ctx.hasOnLabel ? ctx.onLabel : \"\" : ctx.hasOffLabel ? ctx.offLabel : \"\");\n      }\n    },\n    directives: [i1.Ripple, i2.NgClass, i2.NgStyle, i2.NgIf],\n    styles: [\".p-button[_ngcontent-%COMP%]{margin:0;display:inline-flex;cursor:pointer;-webkit-user-select:none;user-select:none;align-items:center;vertical-align:bottom;text-align:center;overflow:hidden;position:relative}.p-button-label[_ngcontent-%COMP%]{flex:1 1 auto}.p-button-icon-right[_ngcontent-%COMP%]{order:1}.p-button[_ngcontent-%COMP%]:disabled{cursor:default}.p-button-icon-only[_ngcontent-%COMP%]{justify-content:center}.p-button-icon-only[_ngcontent-%COMP%]   .p-button-label[_ngcontent-%COMP%]{visibility:hidden;width:0;flex:0 0 auto}.p-button-vertical[_ngcontent-%COMP%]{flex-direction:column}.p-button-icon-bottom[_ngcontent-%COMP%]{order:2}.p-buttonset[_ngcontent-%COMP%]   .p-button[_ngcontent-%COMP%]{margin:0}.p-buttonset[_ngcontent-%COMP%]   .p-button[_ngcontent-%COMP%]:not(:last-child){border-right:0 none}.p-buttonset[_ngcontent-%COMP%]   .p-button[_ngcontent-%COMP%]:not(:first-of-type):not(:last-of-type){border-radius:0}.p-buttonset[_ngcontent-%COMP%]   .p-button[_ngcontent-%COMP%]:first-of-type{border-top-right-radius:0;border-bottom-right-radius:0}.p-buttonset[_ngcontent-%COMP%]   .p-button[_ngcontent-%COMP%]:last-of-type{border-top-left-radius:0;border-bottom-left-radius:0}.p-buttonset[_ngcontent-%COMP%]   .p-button[_ngcontent-%COMP%]:focus{position:relative;z-index:1}.p-button-label[_ngcontent-%COMP%]{transition:all .2s}\"],\n    changeDetection: 0\n  });\n  return ToggleButton;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet ToggleButtonModule = /*#__PURE__*/(() => {\n  class ToggleButtonModule {}\n\n  ToggleButtonModule.ɵfac = function ToggleButtonModule_Factory(t) {\n    return new (t || ToggleButtonModule)();\n  };\n\n  ToggleButtonModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: ToggleButtonModule\n  });\n  ToggleButtonModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [[CommonModule, RippleModule]]\n  });\n  return ToggleButtonModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { TOGGLEBUTTON_VALUE_ACCESSOR, ToggleButton, ToggleButtonModule };","map":null,"metadata":{},"sourceType":"module"}