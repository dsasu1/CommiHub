{"ast":null,"code":"import { AbstractRestService } from \"../../service/BaseService\";\nimport { HttpClient, HttpParams } from \"@angular/common/http\";\nimport { BehaviorSubject } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let PropertyService = /*#__PURE__*/(() => {\n  class PropertyService extends AbstractRestService {\n    constructor(http) {\n      super(http);\n      this.controller = \"property/\";\n      this.isPropInforAlreadyLoaded = false;\n      this.propInfoListChange = new BehaviorSubject(null);\n      this.propAccessListChange = new BehaviorSubject(null);\n    }\n\n    savePropertyInfo(propInfo) {\n      return this.postItem(this.controller + \"SavePropertyInfo\", propInfo);\n    }\n\n    saveHour(hr) {\n      return this.postItem(this.controller + \"SaveHour\", hr);\n    }\n\n    saveRoleProperty(prop) {\n      return this.postItem(this.controller + \"SaveRoleProperty\", prop);\n    }\n\n    saveTenantHome(newHome) {\n      return this.postItem(this.controller + \"SaveTenantHome\", newHome);\n    }\n\n    getPropertyHours(propertyId) {\n      let httpParam = new HttpParams().append(\"id\", propertyId);\n      return this.getItem(this.controller + \"GetPropertyHours\", httpParam);\n    }\n\n    getPropertyByUrl(urlName) {\n      let httpParam = new HttpParams().append(\"id\", urlName);\n      return this.getItem(this.controller + \"GetPropertyByUrl\", httpParam);\n    }\n\n    getUserProperties(userId) {\n      let httpParam = new HttpParams().append(\"id\", userId);\n      return this.getItem(this.controller + \"GetUserProperties\", httpParam);\n    }\n\n    getPropertyById(id) {\n      let httpParam = new HttpParams().append(\"id\", id);\n      return this.getItem(this.controller + \"GetPropertyById\", httpParam);\n    }\n\n    deleteProperty(userId, propertyId) {\n      let httpParam = new HttpParams().append(\"propertyId\", propertyId).append(\"userId\", userId);\n      return this.deleteItem(this.controller + \"DeleteProperty\", httpParam);\n    }\n\n    deletePropertyAccess(userId, propertyId, roleId) {\n      let httpParam = new HttpParams().append(\"propertyId\", propertyId).append(\"userId\", userId).append(\"roleId\", roleId);\n      return this.deleteItem(this.controller + \"DeletePropertyAccess\", httpParam);\n    }\n\n    getPropertyAccess(userId, roleId) {\n      let httpParam = new HttpParams().append(\"userId\", userId).append(\"roleId\", roleId);\n      return this.getItem(this.controller + \"GetPropertyAccess\", httpParam);\n    }\n\n    getPropertyTypes() {\n      return this.getItem(this.controller + \"GetPropertyTypes\");\n    }\n\n    loadUserProperties(userId) {\n      this.getUserProperties(userId).subscribe(data => {\n        this.isPropInforAlreadyLoaded = true;\n        this.propInfoList = data;\n        this.propInfoListChange.next(data);\n      });\n    }\n\n    loadPropertyAccess(userId, roleId) {\n      this.getPropertyAccess(userId, roleId).subscribe(data => {\n        this.propAccessListChange.next(data);\n      });\n    }\n\n  }\n\n  PropertyService.ɵfac = function PropertyService_Factory(t) {\n    return new (t || PropertyService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  PropertyService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: PropertyService,\n    factory: PropertyService.ɵfac\n  });\n  return PropertyService;\n})();","map":null,"metadata":{},"sourceType":"module"}