{"ast":null,"code":"import { AbstractRestService } from './BaseService';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let UsersService = /*#__PURE__*/(() => {\n  class UsersService extends AbstractRestService {\n    constructor(http) {\n      super(http);\n      this.isSuccesful = false;\n      this.controller = \"users/\";\n    }\n\n    getUserTypes() {\n      return this.getItem(this.controller + \"getusertypes\");\n    }\n\n    registerUser(user) {\n      return this.postItem(this.controller + \"RegisterUser\", user);\n    }\n\n    verifyUserSession(user) {\n      return this.postItem(this.controller + \"VerifyUserSession\", user);\n    }\n\n    userHasManagementRights(user) {\n      return this.postItem(this.controller + \"HasManagementRights\", user);\n    }\n\n    loginUser(user) {\n      return this.postItem(this.controller + \"LoginUser\", user);\n    }\n\n    verifyRecaptcha(req) {\n      return this.postItem(this.controller + \"VerifyRecaptcha\", req);\n    }\n\n    SaveUserInfo(user) {\n      return this.putItem(this.controller + \"ModifyUser\", user);\n    }\n\n    confirmUser(user) {\n      return this.putItem(this.controller + \"ConfirmUser\", user);\n    }\n\n    deactivateAccount(userVm) {\n      return this.postItem(this.controller + \"DeactivateAccount\", userVm);\n    }\n\n    retrieveAccount(user) {\n      return this.postItem(this.controller + \"RetrieveAccount\", user);\n    }\n\n    verifySecurityAnswer(user) {\n      return this.postItem(this.controller + \"VerifySecurityAnswer\", user);\n    }\n\n    verifyChangePassword(user) {\n      return this.postItem(this.controller + \"VerifyChangePassword\", user);\n    }\n\n    saveNewPassword(user) {\n      return this.postItem(this.controller + \"SaveNewPassword\", user);\n    }\n\n  }\n\n  UsersService.ɵfac = function UsersService_Factory(t) {\n    return new (t || UsersService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  UsersService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UsersService,\n    factory: UsersService.ɵfac\n  });\n  return UsersService;\n})();\nexport let GlobalService = /*#__PURE__*/(() => {\n  class GlobalService extends AbstractRestService {\n    constructor(http) {\n      super(http);\n      this.languages = new Array();\n      this.languageChanges = new Subject();\n      this.controller = \"global/\";\n    }\n\n    getSecQuestions() {\n      return this.getItem(this.controller + \"GetSecurityQuestions\");\n    }\n\n    lookUpZip(code) {\n      let httpParam = new HttpParams().append(\"code\", code);\n      return this.getItem(this.controller + \"GetZipLookup\", httpParam);\n    }\n\n    loadLanguages() {\n      if (this.languages != null && this.languages.length > 0) {\n        this.languageChanges.next(this.languages);\n      } else {\n        this.getItem(this.controller + \"GetLanguages\").subscribe(data => {\n          this.languages = data;\n          this.languageChanges.next(data);\n        });\n      }\n    }\n\n    getLanguages() {\n      return this.getItem(this.controller + \"GetLanguages\");\n    }\n\n    getavailableLanguages() {\n      return this.languages;\n    }\n\n    setAvailableLanguages(langs) {\n      this.languages = langs;\n    }\n\n    getCountries() {\n      return this.getItem(this.controller + \"GetCountries\");\n    }\n\n  }\n\n  GlobalService.ɵfac = function GlobalService_Factory(t) {\n    return new (t || GlobalService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  GlobalService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: GlobalService,\n    factory: GlobalService.ɵfac\n  });\n  return GlobalService;\n})();","map":null,"metadata":{},"sourceType":"module"}