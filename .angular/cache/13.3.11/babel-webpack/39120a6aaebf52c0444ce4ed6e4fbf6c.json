{"ast":null,"code":"import { AppsessionService } from '../../service/appsession.service';\nimport { ErrorMessage } from '../../model/utility.model';\nimport { AppConstants } from '../../common/AppConstants';\nimport { PropertyInformation, PropertyAccessForm } from '../model/property.model';\nimport { PropertyService } from '../service/property.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../service/appsession.service\";\nimport * as i2 from \"../service/property.service\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/forms\";\nimport * as i5 from \"../../sharedcomponents/appmessages/errormessage.component\";\nimport * as i6 from \"primeng/multiselect\";\nimport * as i7 from \"../../sharedcomponents/progressbar/progressbar.component\";\nimport * as i8 from \"../list/propertylists.component\";\nimport * as i9 from \"@ngx-translate/core\";\n\nfunction RolePropertiesComponent_div_6_app_progressbar_28_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"app-progressbar\", 22);\n  }\n\n  if (rf & 2) {\n    i0.ɵɵproperty(\"isSpinner\", true);\n  }\n}\n\nconst _c0 = function () {\n  return {\n    minWidth: \"100%\"\n  };\n};\n\nfunction RolePropertiesComponent_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 6)(1, \"div\", 7)(2, \"button\", 8);\n    i0.ɵɵlistener(\"click\", function RolePropertiesComponent_div_6_Template_button_click_2_listener() {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return ctx_r4.openForm(true);\n    });\n    i0.ɵɵelement(3, \"i\", 9);\n    i0.ɵɵtext(4);\n    i0.ɵɵpipe(5, \"translate\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(6, \"div\", 7)(7, \"form\", 10, 11);\n    i0.ɵɵlistener(\"ngSubmit\", function RolePropertiesComponent_div_6_Template_form_ngSubmit_7_listener() {\n      i0.ɵɵrestoreView(_r5);\n\n      const _r2 = i0.ɵɵreference(8);\n\n      const ctx_r6 = i0.ɵɵnextContext();\n      return ctx_r6.onSubmitForm(_r2);\n    });\n    i0.ɵɵelementStart(9, \"div\", 6)(10, \"div\", 12)(11, \"div\", 13);\n    i0.ɵɵelement(12, \"app-errormessage\", 14);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(13, \"div\", 6)(14, \"div\", 15)(15, \"div\", 13)(16, \"label\", 16);\n    i0.ɵɵtext(17);\n    i0.ɵɵpipe(18, \"translate\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(19, \"p-multiSelect\", 17);\n    i0.ɵɵlistener(\"ngModelChange\", function RolePropertiesComponent_div_6_Template_p_multiSelect_ngModelChange_19_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r7 = i0.ɵɵnextContext();\n      return ctx_r7.propForm.propertyInfos = $event;\n    });\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(20, \"div\", 15)(21, \"div\", 18)(22, \"button\", 19);\n    i0.ɵɵlistener(\"click\", function RolePropertiesComponent_div_6_Template_button_click_22_listener() {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r8 = i0.ɵɵnextContext();\n      return ctx_r8.openForm(false);\n    });\n    i0.ɵɵtext(23);\n    i0.ɵɵpipe(24, \"translate\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(25, \"button\", 20);\n    i0.ɵɵtext(26);\n    i0.ɵɵpipe(27, \"translate\");\n    i0.ɵɵtemplate(28, RolePropertiesComponent_div_6_app_progressbar_28_Template, 1, 1, \"app-progressbar\", 21);\n    i0.ɵɵelementEnd()()()()()()();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"hidden\", ctx_r0.isOpenForm);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(5, 14, \"AddNew\"), \"\");\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"hidden\", !ctx_r0.isOpenForm);\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"appMsg\", ctx_r0.InfoMsg);\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(18, 16, \"Properties\"));\n    i0.ɵɵadvance(2);\n    i0.ɵɵstyleMap(i0.ɵɵpureFunction0(22, _c0));\n    i0.ɵɵpropertyInterpolate(\"defaultLabel\", ctx_r0.dropDownLabel);\n    i0.ɵɵproperty(\"options\", ctx_r0.dropDownData)(\"panelStyle\", i0.ɵɵpureFunction0(23, _c0))(\"ngModel\", ctx_r0.propForm.propertyInfos);\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(24, 18, \"Cancel\"));\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\"\", i0.ɵɵpipeBind1(27, 20, \"Save\"), \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.isSubmitted);\n  }\n}\n\nfunction RolePropertiesComponent_app_propertylists_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"app-propertylists\", 23);\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"roleId\", ctx_r1.role == null ? null : ctx_r1.role.id);\n  }\n}\n\nexport let RolePropertiesComponent = /*#__PURE__*/(() => {\n  class RolePropertiesComponent {\n    constructor(appsession, propSource) {\n      this.appsession = appsession;\n      this.propSource = propSource;\n      this.InfoMsg = new ErrorMessage();\n      this.propForm = new PropertyAccessForm();\n      this.isOpenForm = false;\n      this.isSubmitted = false;\n    }\n\n    ngOnInit() {\n      this.subscription = this.propSource.propInfoListChange.subscribe(value => {\n        this.propInfos = value;\n      });\n      this.subscriptionTwo = this.propSource.propAccessListChange.subscribe(value => {\n        if (this.propInfos != null) {\n          if (value != null) {\n            let availablePropData = Object.assign([], this.propInfos);\n\n            for (let i = 0; i < value.length; i++) {\n              availablePropData = availablePropData.filter(x => x.id != value[i].propertyInformationId);\n            }\n\n            if (availablePropData != null && availablePropData.length > 0) {\n              this.dropDownData = availablePropData;\n            }\n          }\n        }\n      });\n      this.dropDownLabel = this.appsession.getTranslated(AppConstants.Select);\n      this.role = this.appsession.editItem;\n    }\n\n    onSubmitForm(form) {\n      this.InfoMsg.clear();\n\n      if (form.valid) {\n        this.isSubmitted = true;\n        this.propForm.roleId = this.role.id;\n        this.propForm.userId = this.appsession.CurrentUser.userVM.id;\n        this.propSource.saveRoleProperty(this.propForm).subscribe(data => {\n          this.isSubmitted = false;\n          this.propSource.loadPropertyAccess(this.appsession.CurrentUser.userVM.id, this.role.id);\n          this.openForm(false);\n        }, error => {\n          this.isSubmitted = false;\n        });\n      }\n    }\n\n    openForm(open) {\n      this.InfoMsg.clear();\n\n      if (!open) {\n        this.propForm = new PropertyAccessForm();\n      }\n\n      this.isOpenForm = open;\n    }\n\n    ngOnDestroy() {\n      this.subscription.unsubscribe();\n      this.subscriptionTwo.unsubscribe();\n    }\n\n  }\n\n  RolePropertiesComponent.ɵfac = function RolePropertiesComponent_Factory(t) {\n    return new (t || RolePropertiesComponent)(i0.ɵɵdirectiveInject(i1.AppsessionService), i0.ɵɵdirectiveInject(i2.PropertyService));\n  };\n\n  RolePropertiesComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: RolePropertiesComponent,\n    selectors: [[\"app-role-properties\"]],\n    decls: 8,\n    vars: 5,\n    consts: [[1, \"ui-block\"], [1, \"ui-block-title\"], [1, \"title\"], [1, \"ui-block-content\"], [\"class\", \"row\", 4, \"ngIf\"], [3, \"roleId\", 4, \"ngIf\"], [1, \"row\"], [1, \"col-lg-12\"], [\"type\", \"button\", 1, \"btn\", \"btn-success\", 3, \"hidden\", \"click\"], [1, \"fa\", \"fa-plus\"], [\"ngNativeValidate\", \"\", 3, \"hidden\", \"ngSubmit\"], [\"dataForm\", \"ngForm\"], [1, \"col-lg-12\", \"col-md-12\", \"col-sm-12\", \"col-xs-12\"], [1, \"form-group\"], [3, \"appMsg\"], [1, \"col-lg-6\", \"col-md-6\", \"col-sm-12\", \"col-xs-12\"], [\"for\", \"serviceCodeValues\", 1, \"control-label\"], [\"name\", \"propertyInfos\", \"optionLabel\", \"propName\", 3, \"defaultLabel\", \"options\", \"panelStyle\", \"ngModel\", \"ngModelChange\"], [1, \"form-group\", \"pt-lg-4\", \"pt-md-4\"], [\"type\", \"button\", 1, \"btn\", \"btn-secondary\", 2, \"margin-top\", \"3px\", 3, \"click\"], [\"type\", \"submit\", 1, \"btn\", \"btn-blue\", 2, \"margin-top\", \"3px\"], [3, \"isSpinner\", 4, \"ngIf\"], [3, \"isSpinner\"], [3, \"roleId\"]],\n    template: function RolePropertiesComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"h6\", 2);\n        i0.ɵɵtext(3);\n        i0.ɵɵpipe(4, \"translate\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(5, \"div\", 3);\n        i0.ɵɵtemplate(6, RolePropertiesComponent_div_6_Template, 29, 24, \"div\", 4);\n        i0.ɵɵtemplate(7, RolePropertiesComponent_app_propertylists_7_Template, 1, 1, \"app-propertylists\", 5);\n        i0.ɵɵelementEnd()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(4, 3, \"Properties\"));\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngIf\", (ctx.dropDownData == null ? null : ctx.dropDownData.length) > 0);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.role);\n      }\n    },\n    directives: [i3.NgIf, i4.NgControlStatusGroup, i4.NgForm, i5.ErrormessageComponent, i6.MultiSelect, i4.NgControlStatus, i4.NgModel, i7.ProgressbarComponent, i8.PropertylistsComponent],\n    pipes: [i9.TranslatePipe],\n    encapsulation: 2\n  });\n  return RolePropertiesComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}