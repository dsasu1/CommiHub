{"ast":null,"code":"import { of as observableOf } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { Router, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { AppsessionService } from '../../service/appsession.service';\nimport { UsersService } from '../../service/model.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"../../service/appsession.service\";\nimport * as i3 from \"../../service/model.service\";\nexport let ManagementGuard = /*#__PURE__*/(() => {\n  class ManagementGuard {\n    constructor(route, appsession, userService) {\n      this.route = route;\n      this.appsession = appsession;\n      this.userService = userService;\n    }\n\n    canActivate(route, state) {\n      let currenUser = this.appsession.getCurrentUser();\n\n      if (currenUser != null && this.appsession.IsHasManageRights) {\n        return observableOf(true);\n      } else if (currenUser != null) {\n        return this.userService.userHasManagementRights(currenUser.userVM).pipe(map(e => {\n          if (e == true) {\n            this.appsession.IsHasManageRights = true;\n            return true;\n          } else {\n            this.route.navigate(['/newsfeed']);\n            return false;\n          }\n        }), catchError(() => {\n          this.route.navigate(['/newsfeed']);\n          return observableOf(false);\n        }));\n      }\n\n      this.route.navigate(['/newsfeed']);\n      return observableOf(false);\n    }\n\n    canActivateChild(childRoute, state) {\n      return this.canActivate(childRoute, state);\n    }\n\n  }\n\n  ManagementGuard.ɵfac = function ManagementGuard_Factory(t) {\n    return new (t || ManagementGuard)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.AppsessionService), i0.ɵɵinject(i3.UsersService));\n  };\n\n  ManagementGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ManagementGuard,\n    factory: ManagementGuard.ɵfac\n  });\n  return ManagementGuard;\n})();","map":null,"metadata":{},"sourceType":"module"}