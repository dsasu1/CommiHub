{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport { AbstractRestService } from '../../../service/BaseService';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let ResidentsService = /*#__PURE__*/(() => {\n  class ResidentsService extends AbstractRestService {\n    constructor(http) {\n      super(http);\n      this.controller = \"residents/\";\n      this.residentsListChange = new Subject();\n    }\n\n    getResidents(userId, propertyInfoId) {\n      let httpParam = new HttpParams().append(\"propertyInformationId\", propertyInfoId).append(\"userId\", userId);\n      return this.getItem(this.controller + \"GetResidents\", httpParam);\n    }\n\n    saveResidencyStatus(residentStat) {\n      return this.putItem(this.controller + \"SaveResidencyStatus\", residentStat);\n    }\n\n    loadResidents(userId, propertyInfoId) {\n      this.getResidents(userId, propertyInfoId).subscribe(data => {\n        this.residentsList = data;\n        this.residentsListChange.next(data);\n      });\n    }\n\n    hasValidResidency(userId, propertyInfoId) {\n      return this.getResidents(userId, propertyInfoId).pipe(map(data => {\n        if (data != null) {\n          let residents = data.filter(x => x.isApproved == true && !x.isMovedOut);\n          return residents != null && residents.length > 0;\n        }\n\n        return false;\n      }));\n    }\n\n    hasValidOrPreviousResidency(userId, propertyInfoId) {\n      return this.getResidents(userId, propertyInfoId).pipe(map(data => {\n        if (data != null) {\n          let residents = data.filter(x => x.isApproved == true && (!x.isMovedOut || x.isMovedOut));\n          return residents != null && residents.length > 0;\n        }\n\n        return false;\n      }));\n    }\n\n  }\n\n  ResidentsService.ɵfac = function ResidentsService_Factory(t) {\n    return new (t || ResidentsService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  ResidentsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ResidentsService,\n    factory: ResidentsService.ɵfac\n  });\n  return ResidentsService;\n})();","map":null,"metadata":{},"sourceType":"module"}