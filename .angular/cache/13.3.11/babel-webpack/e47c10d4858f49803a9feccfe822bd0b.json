{"ast":null,"code":"import { of as observableOf } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\nimport { ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { PropertyService } from './property.service';\nimport { AppsessionService } from '../../service/appsession.service';\nimport { UserTypeEnum } from '../../common/AppConstants';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./property.service\";\nimport * as i2 from \"../../service/appsession.service\";\nexport let ManagePropertyInfoResolver = /*#__PURE__*/(() => {\n  class ManagePropertyInfoResolver {\n    constructor(propSevice, appsession) {\n      this.propSevice = propSevice;\n      this.appsession = appsession;\n    }\n\n    resolve(route, state) {\n      let id = route.paramMap.get('id');\n      let currentUser = this.appsession.getCurrentUser();\n\n      if (currentUser != null) {\n        if (this.appsession.selectedProperty != null && this.appsession.selectedProperty.id == id) {\n          this.appsession.editItem = this.appsession.selectedProperty;\n          return observableOf(this.appsession.selectedProperty);\n        } else if (this.appsession.properties != null) {\n          let propInfos = this.appsession.properties;\n\n          if (propInfos != null && propInfos.length > 0) {\n            let props = propInfos.filter(x => x.id == id);\n\n            if (props.length > 0) {\n              this.appsession.editItem = props[0];\n              return observableOf(props[0]);\n            } else {\n              this.appsession.redirectToRoute(currentUser.noPropertyRedirectPage);\n              return observableOf(null);\n            }\n          }\n        } else {\n          return this.propSevice.getUserProperties(currentUser.userVM.id).pipe(map(info => {\n            if (info != null && info.length > 0) {\n              let prop = info.filter(x => x.id == id);\n\n              if (prop != null && prop.length > 0) {\n                if (currentUser.userTypeEnum == UserTypeEnum[UserTypeEnum.Tenant]) {\n                  this.appsession.editItem = prop[0];\n                  this.appsession.setSelectedProperty(prop[0]);\n                  return info;\n                } else if (info != null && currentUser.managementId == prop[0].managementUserId) {\n                  this.appsession.editItem = prop[0];\n                  this.appsession.setSelectedProperty(prop[0]);\n                  return info;\n                }\n              }\n\n              this.appsession.redirectToRoute(currentUser.noPropertyRedirectPage);\n              return null;\n            } else {\n              this.appsession.redirectToRoute(currentUser.noPropertyRedirectPage);\n              return null;\n            }\n          }), catchError(() => {\n            this.appsession.redirectToRoute(currentUser.noPropertyRedirectPage);\n            return observableOf(null);\n          }));\n        }\n      }\n\n      this.appsession.redirectToRoute();\n      return observableOf(null);\n    }\n\n  }\n\n  ManagePropertyInfoResolver.ɵfac = function ManagePropertyInfoResolver_Factory(t) {\n    return new (t || ManagePropertyInfoResolver)(i0.ɵɵinject(i1.PropertyService), i0.ɵɵinject(i2.AppsessionService));\n  };\n\n  ManagePropertyInfoResolver.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ManagePropertyInfoResolver,\n    factory: ManagePropertyInfoResolver.ɵfac\n  });\n  return ManagePropertyInfoResolver;\n})();\nexport let SelectedPropertyResolver = /*#__PURE__*/(() => {\n  class SelectedPropertyResolver {\n    constructor(propSevice, appsession) {\n      this.propSevice = propSevice;\n      this.appsession = appsession;\n    }\n\n    resolve(route, state) {\n      let currentUser = this.appsession.getCurrentUser();\n\n      if (currentUser != null) {\n        if (this.appsession.selectedProperty != null) {\n          return observableOf(this.appsession.selectedProperty);\n        } else if (this.propSevice.isPropInforAlreadyLoaded) {\n          let propInfos = this.propSevice.propInfoList;\n\n          if (propInfos != null && propInfos.length > 0) {\n            this.appsession.setSelectedProperty(propInfos[0]);\n            return observableOf(propInfos[0]);\n          }\n        } else {\n          return this.propSevice.getUserProperties(currentUser.userVM.id).pipe(map(info => {\n            if (info != null && info.length > 0) {\n              this.propSevice.propInfoListChange.next(info);\n              this.appsession.properties = info;\n              this.appsession.setSelectedProperty(info[0]);\n              return info[0];\n            } else {\n              //this.router.navigate([currentUser.noPropertyRedirectPage]);\n              return null;\n            }\n          }), catchError(() => {\n            this.appsession.redirectToRoute();\n            return observableOf(null);\n          }));\n        }\n      } else {\n        if (state.url.indexOf(\"/property/\") != -1) {\n          let id = route.paramMap.get('id');\n          return this.propSevice.getPropertyByUrl(id).pipe(map(info => {\n            if (info != null) {\n              this.appsession.setSelectedProperty(info);\n              return info;\n            } else {\n              this.appsession.redirectToRoute();\n              return null;\n            }\n          }), catchError(() => {\n            this.appsession.redirectToRoute();\n            return observableOf(null);\n          }));\n        }\n      }\n\n      this.appsession.redirectToRoute();\n      return observableOf(null);\n    }\n\n  }\n\n  SelectedPropertyResolver.ɵfac = function SelectedPropertyResolver_Factory(t) {\n    return new (t || SelectedPropertyResolver)(i0.ɵɵinject(i1.PropertyService), i0.ɵɵinject(i2.AppsessionService));\n  };\n\n  SelectedPropertyResolver.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SelectedPropertyResolver,\n    factory: SelectedPropertyResolver.ɵfac\n  });\n  return SelectedPropertyResolver;\n})();","map":null,"metadata":{},"sourceType":"module"}