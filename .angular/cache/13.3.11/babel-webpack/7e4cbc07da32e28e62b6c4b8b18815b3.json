{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { EventEmitter, Component, ChangeDetectionStrategy, ViewEncapsulation, Input, Output, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nlet Captcha = /*#__PURE__*/(() => {\n  class Captcha {\n    constructor(el, _zone, cd) {\n      this.el = el;\n      this._zone = _zone;\n      this.cd = cd;\n      this.siteKey = null;\n      this.theme = 'light';\n      this.type = 'image';\n      this.size = 'normal';\n      this.tabindex = 0;\n      this.initCallback = \"initRecaptcha\";\n      this.onResponse = new EventEmitter();\n      this.onExpire = new EventEmitter();\n      this._instance = null;\n      this._language = null;\n    }\n\n    get language() {\n      return this._language;\n    }\n\n    set language(language) {\n      this._language = language;\n      this.init();\n    }\n\n    ngAfterViewInit() {\n      if (window.grecaptcha) {\n        if (!window.grecaptcha.render) {\n          setTimeout(() => {\n            this.init();\n          }, 100);\n        } else {\n          this.init();\n        }\n      } else {\n        window[this.initCallback] = () => {\n          this.init();\n        };\n      }\n    }\n\n    init() {\n      this._instance = window.grecaptcha.render(this.el.nativeElement.children[0], {\n        'sitekey': this.siteKey,\n        'theme': this.theme,\n        'type': this.type,\n        'size': this.size,\n        'tabindex': this.tabindex,\n        'hl': this.language,\n        'callback': response => {\n          this._zone.run(() => this.recaptchaCallback(response));\n        },\n        'expired-callback': () => {\n          this._zone.run(() => this.recaptchaExpiredCallback());\n        }\n      });\n    }\n\n    reset() {\n      if (this._instance === null) return;\n      window.grecaptcha.reset(this._instance);\n      this.cd.markForCheck();\n    }\n\n    getResponse() {\n      if (this._instance === null) return null;\n      return window.grecaptcha.getResponse(this._instance);\n    }\n\n    recaptchaCallback(response) {\n      this.onResponse.emit({\n        response: response\n      });\n    }\n\n    recaptchaExpiredCallback() {\n      this.onExpire.emit();\n    }\n\n    ngOnDestroy() {\n      if (this._instance != null) {\n        window.grecaptcha.reset(this._instance);\n      }\n    }\n\n  }\n\n  Captcha.ɵfac = function Captcha_Factory(t) {\n    return new (t || Captcha)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n  };\n\n  Captcha.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: Captcha,\n    selectors: [[\"p-captcha\"]],\n    hostAttrs: [1, \"p-element\"],\n    inputs: {\n      siteKey: \"siteKey\",\n      theme: \"theme\",\n      type: \"type\",\n      size: \"size\",\n      tabindex: \"tabindex\",\n      initCallback: \"initCallback\",\n      language: \"language\"\n    },\n    outputs: {\n      onResponse: \"onResponse\",\n      onExpire: \"onExpire\"\n    },\n    decls: 1,\n    vars: 0,\n    template: function Captcha_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"div\");\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return Captcha;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet CaptchaModule = /*#__PURE__*/(() => {\n  class CaptchaModule {}\n\n  CaptchaModule.ɵfac = function CaptchaModule_Factory(t) {\n    return new (t || CaptchaModule)();\n  };\n\n  CaptchaModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: CaptchaModule\n  });\n  CaptchaModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [[CommonModule]]\n  });\n  return CaptchaModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { Captcha, CaptchaModule };","map":null,"metadata":{},"sourceType":"module"}