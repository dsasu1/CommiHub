{"ast":null,"code":"import { AppsessionService } from '../../../service/appsession.service';\nimport { ResidentsService } from '../service/residents.service';\nimport { ResidencyStatusVM } from '../model/residents.model';\nimport { UserTypeEnum, AppConstants } from '../../../common/AppConstants';\nimport { MessageDetail } from '../../../model/utility.model';\nimport { PropertyService } from '../../service/property.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../../service/appsession.service\";\nimport * as i2 from \"../service/residents.service\";\nimport * as i3 from \"../../service/property.service\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"../../../common/directives/sweetalert.directive\";\nimport * as i6 from \"../../../sharedcomponents/paging/pager.component\";\nimport * as i7 from \"@ngx-translate/core\";\n\nfunction ResidentsListComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 4)(1, \"h5\");\n    i0.ɵɵtext(2);\n    i0.ɵɵpipe(3, \"translate\");\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(3, 1, \"NoDataToDisplay\"));\n  }\n}\n\nfunction ResidentsListComponent_li_2_span_12_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r10 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"span\", 11)(1, \"button\", 12);\n    i0.ɵɵlistener(\"onConfirm\", function ResidentsListComponent_li_2_span_12_Template_button_onConfirm_1_listener() {\n      i0.ɵɵrestoreView(_r10);\n      const itemData_r3 = i0.ɵɵnextContext().$implicit;\n      const ctx_r8 = i0.ɵɵnextContext();\n      return ctx_r8.statusChangeClick(\"Approval\", false, itemData_r3);\n    });\n    i0.ɵɵtext(2);\n    i0.ɵɵpipe(3, \"translate\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"button\", 13);\n    i0.ɵɵlistener(\"onConfirm\", function ResidentsListComponent_li_2_span_12_Template_button_onConfirm_4_listener() {\n      i0.ɵɵrestoreView(_r10);\n      const itemData_r3 = i0.ɵɵnextContext().$implicit;\n      const ctx_r11 = i0.ɵɵnextContext();\n      return ctx_r11.statusChangeClick(\"Approval\", true, itemData_r3);\n    });\n    i0.ɵɵtext(5);\n    i0.ɵɵpipe(6, \"translate\");\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(3, 2, \"Reject\"));\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(6, 4, \"Approve\"));\n  }\n}\n\nfunction ResidentsListComponent_li_2_span_13_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r15 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"span\", 11)(1, \"button\", 12);\n    i0.ɵɵlistener(\"onConfirm\", function ResidentsListComponent_li_2_span_13_Template_button_onConfirm_1_listener() {\n      i0.ɵɵrestoreView(_r15);\n      const itemData_r3 = i0.ɵɵnextContext().$implicit;\n      const ctx_r13 = i0.ɵɵnextContext();\n      return ctx_r13.statusChangeClick(\"Cancel\", false, itemData_r3);\n    });\n    i0.ɵɵtext(2);\n    i0.ɵɵpipe(3, \"translate\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"button\", 14);\n    i0.ɵɵtext(5);\n    i0.ɵɵpipe(6, \"translate\");\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(3, 3, \"Cancel\"));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"disabled\", true);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(6, 5, \"PendingApproval\"));\n  }\n}\n\nfunction ResidentsListComponent_li_2_span_14_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r18 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"span\", 11)(1, \"button\", 12);\n    i0.ɵɵlistener(\"onConfirm\", function ResidentsListComponent_li_2_span_14_Template_button_onConfirm_1_listener() {\n      i0.ɵɵrestoreView(_r18);\n      const itemData_r3 = i0.ɵɵnextContext().$implicit;\n      const ctx_r16 = i0.ɵɵnextContext();\n      return ctx_r16.statusChangeClick(\"MoveOut\", true, itemData_r3);\n    });\n    i0.ɵɵtext(2);\n    i0.ɵɵpipe(3, \"translate\");\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(3, 1, \"Moveout\"));\n  }\n}\n\nfunction ResidentsListComponent_li_2_span_15_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"span\", 11);\n  }\n}\n\nfunction ResidentsListComponent_li_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\")(1, \"div\", 5);\n    i0.ɵɵelement(2, \"img\", 6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 7)(4, \"h6\", 8);\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"span\", 9);\n    i0.ɵɵtext(7);\n    i0.ɵɵpipe(8, \"translate\");\n    i0.ɵɵpipe(9, \"translate\");\n    i0.ɵɵelementStart(10, \"strong\");\n    i0.ɵɵtext(11);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵtemplate(12, ResidentsListComponent_li_2_span_12_Template, 7, 6, \"span\", 10);\n    i0.ɵɵtemplate(13, ResidentsListComponent_li_2_span_13_Template, 7, 7, \"span\", 10);\n    i0.ɵɵtemplate(14, ResidentsListComponent_li_2_span_14_Template, 4, 3, \"span\", 10);\n    i0.ɵɵtemplate(15, ResidentsListComponent_li_2_span_15_Template, 1, 0, \"span\", 10);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const itemData_r3 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"src\", ctx_r1.GetImageUrl(itemData_r3.userPhoto), i0.ɵɵsanitizeUrl);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(ctx_r1.isTenant ? itemData_r3.unitName : itemData_r3.userName);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate2(\"\", i0.ɵɵpipeBind1(8, 9, \"UnitBuilding\"), \" \", i0.ɵɵpipeBind1(9, 11, \"Colon\"), \" \");\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(itemData_r3.unitAddress);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.displayType == \"pending\" && !ctx_r1.isTenant);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.displayType == \"pending\" && ctx_r1.isTenant);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.displayType == \"current\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.displayType == \"past\");\n  }\n}\n\nfunction ResidentsListComponent_app_pager_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r20 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"app-pager\", 15);\n    i0.ɵɵlistener(\"onPaged\", function ResidentsListComponent_app_pager_3_Template_app_pager_onPaged_0_listener($event) {\n      i0.ɵɵrestoreView(_r20);\n      const ctx_r19 = i0.ɵɵnextContext();\n      return ctx_r19.currentdata = $event;\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"dataList\", ctx_r2.availabledata);\n  }\n}\n\nexport let ResidentsListComponent = /*#__PURE__*/(() => {\n  class ResidentsListComponent {\n    constructor(appsession, residentService, propService) {\n      this.appsession = appsession;\n      this.residentService = residentService;\n      this.propService = propService;\n      this.displayType = \"current\"; // current/ pending/ past/\n\n      this.currentdata = new Array();\n      this.isTenant = false;\n    }\n\n    ngOnInit() {\n      this.confirmAlertOption = {\n        title: this.appsession.getTranslated(\"Confirm\"),\n        text: this.appsession.getTranslated(\"AreYouSure\"),\n        showCancelButton: true,\n        type: 'question'\n      };\n      this.subscription = this.residentService.residentsListChange.subscribe(value => {\n        if (value != null) {\n          if (this.displayType == 'pending') {\n            this.availabledata = value.filter(x => x.isApproved == null);\n          } else if (this.displayType == 'current') {\n            this.availabledata = value.filter(x => x.isApproved == true && !x.isMovedOut);\n          } else if (this.displayType == 'past') {\n            this.availabledata = value.filter(x => x.isApproved == true && x.isMovedOut);\n          }\n        }\n\n        if (this.availabledata != null) {\n          this.currentdata = this.appsession.paginate(this.availabledata, this.appsession.defaultPageSize, this.appsession.defaultPageSize);\n        }\n      });\n\n      if (this.appsession.IsUserLoggedIn) {\n        let property = this.appsession.editItem;\n        this.residentService.loadResidents(this.appsession.CurrentUser.userVM.id, property.id);\n        this.isTenant = this.appsession.CurrentUser.userTypeEnum == UserTypeEnum[UserTypeEnum.Tenant];\n      }\n    }\n\n    ngOnDestroy() {\n      this.subscription.unsubscribe();\n    }\n\n    getStatusText(resident) {\n      if (resident.isApproved == null) {}\n    }\n\n    GetImageUrl(userPhoto) {\n      let result = this.appsession.getImageData(userPhoto, 'image', '../../../assets/img/avatar1.jpg');\n      return result;\n    }\n\n    statusChangeClick(changeType, changeValue, resident) {\n      if (resident.isDemoAccount) {\n        let message = new MessageDetail();\n        message.isInfo = true;\n        message.msg = this.appsession.getTranslated(\"DemoFunctionalityLimited\");\n        this.appsession.setGlobalHeaderMessage(message);\n        return;\n      }\n\n      let residentStatus = new ResidencyStatusVM();\n      residentStatus.changeValue = changeValue;\n      residentStatus.id = resident.id;\n      residentStatus.statusType = changeType;\n      residentStatus.residentUserId = resident.userId;\n      residentStatus.changerUserId = this.appsession.CurrentUser.userVM.id;\n      residentStatus.propertyInformationId = resident.propertyInformationId;\n      this.residentService.saveResidencyStatus(residentStatus).subscribe(data => {\n        if (data == true) {\n          let property = this.appsession.editItem;\n          this.residentService.loadResidents(this.appsession.CurrentUser.userVM.id, property.id);\n\n          if (changeType == \"Cancel\") {\n            this.propService.loadUserProperties(this.appsession.CurrentUser.userVM.id);\n          }\n        }\n      }, error => {\n        let message = new MessageDetail();\n        message.isSuccess = false;\n        message.msg = this.appsession.getTranslated(AppConstants.SomethingWrong);\n        this.appsession.setGlobalHeaderMessage(message);\n      });\n    }\n\n  }\n\n  ResidentsListComponent.ɵfac = function ResidentsListComponent_Factory(t) {\n    return new (t || ResidentsListComponent)(i0.ɵɵdirectiveInject(i1.AppsessionService), i0.ɵɵdirectiveInject(i2.ResidentsService), i0.ɵɵdirectiveInject(i3.PropertyService));\n  };\n\n  ResidentsListComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ResidentsListComponent,\n    selectors: [[\"app-residents-list\"]],\n    inputs: {\n      displayType: \"displayType\"\n    },\n    decls: 4,\n    vars: 3,\n    consts: [[\"class\", \"ui-block text-center\", 4, \"ngIf\"], [1, \"notification-list\", \"friend-requests\"], [4, \"ngFor\", \"ngForOf\"], [3, \"dataList\", \"onPaged\", 4, \"ngIf\"], [1, \"ui-block\", \"text-center\"], [1, \"author-thumb\"], [\"alt\", \"author\", 2, \"max-height\", \"36px\", 3, \"src\"], [1, \"notification-event\"], [1, \"notification-friend\"], [1, \"chat-message-item\"], [\"class\", \"notification-icon\", 4, \"ngIf\"], [1, \"notification-icon\"], [\"type\", \"button\", \"PSSweetAlert\", \"\", 1, \"btn\", \"btn-secondary\", \"btn-sm\", 3, \"onConfirm\"], [\"type\", \"button\", \"PSSweetAlert\", \"\", 1, \"btn\", \"btn-blue\", \"btn-sm\", 3, \"onConfirm\"], [\"type\", \"button\", 1, \"btn\", \"btn-blue\", \"btn-sm\", 3, \"disabled\"], [3, \"dataList\", \"onPaged\"]],\n    template: function ResidentsListComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, ResidentsListComponent_div_0_Template, 4, 3, \"div\", 0);\n        i0.ɵɵelementStart(1, \"ul\", 1);\n        i0.ɵɵtemplate(2, ResidentsListComponent_li_2_Template, 16, 13, \"li\", 2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(3, ResidentsListComponent_app_pager_3_Template, 1, 1, \"app-pager\", 3);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.currentdata.length < 1);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngForOf\", ctx.currentdata);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.availabledata);\n      }\n    },\n    directives: [i4.NgIf, i4.NgForOf, i5.PSSweetAlertDirective, i6.PagerComponent],\n    pipes: [i7.TranslatePipe],\n    encapsulation: 2\n  });\n  return ResidentsListComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}