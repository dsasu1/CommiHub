{"ast":null,"code":"import { of as observableOf } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { Router, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { RolesService } from './role.service';\nimport { AppsessionService } from '../../service/appsession.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./role.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"../../service/appsession.service\";\nexport let AvailableRoleResolver = /*#__PURE__*/(() => {\n  class AvailableRoleResolver {\n    constructor(roleService, router, appsession) {\n      this.roleService = roleService;\n      this.router = router;\n      this.appsession = appsession;\n    }\n\n    resolve(route, state) {\n      let id = route.paramMap.get('id');\n      return this.roleService.getAvailableRole(id).pipe(map(role => {\n        if (role) {\n          this.appsession.editItem = role;\n          return role;\n        } else {\n          this.router.navigate(['']);\n          return null;\n        }\n      }), catchError(() => {\n        this.router.navigate(['']);\n        return observableOf(null);\n      }));\n    }\n\n  }\n\n  AvailableRoleResolver.ɵfac = function AvailableRoleResolver_Factory(t) {\n    return new (t || AvailableRoleResolver)(i0.ɵɵinject(i1.RolesService), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.AppsessionService));\n  };\n\n  AvailableRoleResolver.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AvailableRoleResolver,\n    factory: AvailableRoleResolver.ɵfac\n  });\n  return AvailableRoleResolver;\n})();","map":null,"metadata":{},"sourceType":"module"}