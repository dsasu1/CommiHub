{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { ErrorMessage, MessageDetail } from '../../model/utility.model';\nimport { FileOptions } from './model/fileupload.model';\nimport { FileUploadService } from './service/fileupload.service';\nimport { AppsessionService } from '../../service/appsession.service';\nimport { PSUploadType } from '../../common/AppConstants';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./service/fileupload.service\";\nimport * as i2 from \"../../service/appsession.service\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"../appmessages/errormessage.component\";\nimport * as i5 from \"@angular/common\";\nimport * as i6 from \"../progressbar/progressbar.component\";\nimport * as i7 from \"@ngx-translate/core\";\n\nfunction UploadFormComponent_div_14_app_progressbar_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"app-progressbar\", 16);\n  }\n\n  if (rf & 2) {\n    i0.ɵɵproperty(\"isSpinner\", true);\n  }\n}\n\nfunction UploadFormComponent_div_14_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 12)(1, \"button\", 13);\n    i0.ɵɵlistener(\"click\", function UploadFormComponent_div_14_Template_button_click_1_listener() {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext();\n\n      const _r0 = i0.ɵɵreference(2);\n\n      return ctx_r4.clearForm(_r0);\n    });\n    i0.ɵɵtext(2);\n    i0.ɵɵpipe(3, \"translate\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"button\", 14);\n    i0.ɵɵtext(5);\n    i0.ɵɵpipe(6, \"translate\");\n    i0.ɵɵtemplate(7, UploadFormComponent_div_14_app_progressbar_7_Template, 1, 1, \"app-progressbar\", 15);\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n\n    const _r0 = i0.ɵɵreference(2);\n\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(3, 4, \"Clear\"));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"disabled\", !_r0.form.valid);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"\", i0.ɵɵpipeBind1(6, 6, \"Upload\"), \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.isSubmitted);\n  }\n}\n\nfunction UploadFormComponent_li_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const file_r6 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(file_r6.name);\n  }\n}\n\nexport let UploadFormComponent = /*#__PURE__*/(() => {\n  class UploadFormComponent {\n    constructor(fileService, appSession) {\n      this.fileService = fileService;\n      this.appSession = appSession;\n      this.onFinishedUpload = new EventEmitter();\n      this.InfoMsg = new ErrorMessage();\n      this.filesToUpload = [];\n      this.isSubmitted = false;\n    }\n\n    ngOnInit() {}\n\n    onFileChange(event) {\n      let files = event.target.files;\n      this.filesToUpload = Object.assign([], files);\n    }\n\n    onUpload(form) {\n      if (this.uploadOptions.uploadType == PSUploadType[PSUploadType.CoverImage] || this.uploadOptions.uploadType == PSUploadType[PSUploadType.ProfilePic]) {\n        let item = this.uploadOptions.uploadTarget;\n\n        if (item != null && item.isDemoAccount) {\n          let message = new MessageDetail();\n          message.isInfo = true;\n          message.msg = this.appSession.getTranslated(\"DemoFunctionalityLimited\");\n          this.appSession.setGlobalHeaderMessage(message);\n          return;\n        }\n      }\n\n      if (form.valid) {\n        if (this.filesToUpload.length > 0) {\n          if (this.filesToUpload.length > 0 && !this.isValidFiles(this.filesToUpload)) {\n            return;\n          }\n\n          let formData = new FormData();\n\n          for (var j = 0; j < this.filesToUpload.length; j++) {\n            formData.append(\"files\", this.filesToUpload[j]);\n          }\n\n          formData.append(\"uploadType\", this.uploadOptions.uploadType);\n          formData.append(\"userId\", this.uploadOptions.userId);\n\n          if (this.uploadOptions.propertyInformationId != null) {\n            formData.append(\"propertyInformationId\", this.uploadOptions.propertyInformationId);\n          }\n\n          formData.append(\"fileType\", this.uploadOptions.fileType);\n          formData.append(\"directoryId\", this.uploadOptions.directoryId);\n          formData.append(\"hasThumbnail\", this.uploadOptions.hasThumbnail ? \"true\" : \"false\");\n          formData.append(\"thumbnailWidth\", this.uploadOptions.thumbnailWidth.toString());\n          formData.append(\"thumbnaiHeight\", this.uploadOptions.thumbnaiHeight.toString());\n          formData.append(\"containerName\", this.uploadOptions.containerName);\n          this.isSubmitted = true;\n          this.fileService.uploadFile(formData).subscribe(data => {\n            this.appSession.setGlobalHeaderMessage();\n            this.onFinishedUpload.emit(data);\n            this.isSubmitted = false;\n            this.fileInput = null;\n            form.reset();\n            this.filesToUpload = [];\n            return;\n          }, error => {\n            let messages = this.appSession.getHttpErrorMessages(error);\n            this.isSubmitted = false;\n            this.InfoMsg.addRange(messages);\n            return;\n          });\n        }\n      }\n    }\n\n    clearForm(form) {\n      form.reset();\n      this.filesToUpload = [];\n    }\n\n    isValidFiles(files) {\n      // Check Number of files\n      if (files.length > this.uploadOptions.maxFiles) {\n        this.InfoMsg.add(this.appSession.getTranslated(\"MaxFileAllowedPerUpload\") + this.uploadOptions.maxFiles);\n        return;\n      }\n\n      this.isValidFileExtension(files);\n      return this.InfoMsg.errorMessages.length === 0;\n    }\n\n    isValidFileExtension(files) {\n      // Make array of file extensions\n      var extensions = this.uploadOptions.fileExt.split(',').map(function (x) {\n        return x.toLocaleUpperCase().trim();\n      });\n\n      for (var i = 0; i < files.length; i++) {\n        // Get file extension\n        var ext = files[i].name.toUpperCase().split('.').pop() || files[i].name; // Check the extension exists\n\n        var exists = extensions.includes(ext);\n\n        if (!exists) {\n          this.InfoMsg.add(this.appSession.getTranslated(\"InvalidExtension\") + files[i].name);\n        } // Check file size\n\n\n        this.isValidFileSize(files[0]);\n      }\n    }\n\n    isValidFileSize(file) {\n      var fileSizeinMB = file.size / (1024 * 1000);\n      var size = Math.round(fileSizeinMB * 100) / 100; // convert upto 2 decimal place\n\n      if (size > this.uploadOptions.maxSize) this.InfoMsg.add(this.appSession.getTranslated(\"ExceededFileSizeLimit\") + file.name + \" \" + size + \" MB\");\n    }\n\n  }\n\n  UploadFormComponent.ɵfac = function UploadFormComponent_Factory(t) {\n    return new (t || UploadFormComponent)(i0.ɵɵdirectiveInject(i1.FileUploadService), i0.ɵɵdirectiveInject(i2.AppsessionService));\n  };\n\n  UploadFormComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: UploadFormComponent,\n    selectors: [[\"app-upload-form\"]],\n    inputs: {\n      uploadOptions: \"uploadOptions\"\n    },\n    outputs: {\n      onFinishedUpload: \"onFinishedUpload\"\n    },\n    decls: 19,\n    vars: 11,\n    consts: [[1, \"row\"], [\"ngNativeValidate\", \"\", 2, \"min-width\", \"100%\", 3, \"ngSubmit\"], [\"uploadform\", \"ngForm\"], [1, \"col-lg-12\"], [1, \"col-lg-12\", \"col-md-12\", \"col-sm-12\", \"col-xs-12\"], [1, \"form-group\"], [3, \"appMsg\"], [1, \"col-lg-3\", \"col-md-3\", \"col-sm-6\", \"col-xs-12\"], [1, \"btn\", \"btn-blue\"], [\"type\", \"file\", \"hidden\", \"\", 3, \"ngModel\", \"name\", \"id\", \"multiple\", \"accept\", \"ngModelChange\", \"change\"], [\"class\", \"col-lg-6 col-md-6 col-sm-6 col-xs-12\", 4, \"ngIf\"], [4, \"ngFor\", \"ngForOf\"], [1, \"col-lg-6\", \"col-md-6\", \"col-sm-6\", \"col-xs-12\"], [\"type\", \"button\", 1, \"btn\", \"btn-secondary\", 3, \"click\"], [\"type\", \"submit\", 1, \"btn\", \"btn-blue\", 3, \"disabled\"], [3, \"isSpinner\", 4, \"ngIf\"], [3, \"isSpinner\"]],\n    template: function UploadFormComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        const _r7 = i0.ɵɵgetCurrentView();\n\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"form\", 1, 2);\n        i0.ɵɵlistener(\"ngSubmit\", function UploadFormComponent_Template_form_ngSubmit_1_listener() {\n          i0.ɵɵrestoreView(_r7);\n\n          const _r0 = i0.ɵɵreference(2);\n\n          return ctx.onUpload(_r0);\n        });\n        i0.ɵɵelementStart(3, \"div\", 3)(4, \"div\", 0)(5, \"div\", 4)(6, \"div\", 5);\n        i0.ɵɵelement(7, \"app-errormessage\", 6);\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(8, \"div\", 0)(9, \"div\", 7)(10, \"label\", 8);\n        i0.ɵɵtext(11);\n        i0.ɵɵpipe(12, \"translate\");\n        i0.ɵɵelementStart(13, \"input\", 9);\n        i0.ɵɵlistener(\"ngModelChange\", function UploadFormComponent_Template_input_ngModelChange_13_listener($event) {\n          return ctx.fileInput = $event;\n        })(\"change\", function UploadFormComponent_Template_input_change_13_listener($event) {\n          return ctx.onFileChange($event);\n        });\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵtemplate(14, UploadFormComponent_div_14_Template, 8, 8, \"div\", 10);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(15, \"div\", 0)(16, \"div\", 4)(17, \"ul\");\n        i0.ɵɵtemplate(18, UploadFormComponent_li_18_Template, 2, 1, \"li\", 11);\n        i0.ɵɵelementEnd()()()()()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(7);\n        i0.ɵɵproperty(\"appMsg\", ctx.InfoMsg);\n        i0.ɵɵadvance(4);\n        i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(12, 9, \"ChooseFile\"), \" \");\n        i0.ɵɵadvance(2);\n        i0.ɵɵpropertyInterpolate(\"name\", ctx.uploadOptions.name);\n        i0.ɵɵpropertyInterpolate(\"id\", ctx.uploadOptions.name);\n        i0.ɵɵpropertyInterpolate(\"accept\", ctx.uploadOptions.acceptsType);\n        i0.ɵɵproperty(\"ngModel\", ctx.fileInput)(\"multiple\", ctx.uploadOptions.allowMultiple);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.filesToUpload.length > 0);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngForOf\", ctx.filesToUpload);\n      }\n    },\n    directives: [i3.NgControlStatusGroup, i3.NgForm, i4.ErrormessageComponent, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgModel, i5.NgIf, i6.ProgressbarComponent, i5.NgForOf],\n    pipes: [i7.TranslatePipe],\n    encapsulation: 2\n  });\n  return UploadFormComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}