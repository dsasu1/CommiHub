{"ast":null,"code":"import { AbstractRestService } from '../../service/BaseService';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let NotificationService = /*#__PURE__*/(() => {\n  class NotificationService extends AbstractRestService {\n    constructor(http) {\n      super(http);\n      this.controller = \"Notifications/\";\n      this.notifyListChange = new Subject();\n      this.filteredNotifyListChange = new Subject();\n    }\n\n    getNotifications(userId, propertyId, isMainPageView) {\n      let httpParams = new HttpParams().append(\"userId\", userId).append(\"propertyId\", propertyId).append(\"isMainPageView\", isMainPageView ? \"true\" : \"false\");\n      return this.getItem(this.controller + \"GetNotifications\", httpParams);\n    }\n\n    loadNotifications(userId, propertyId, isMainPageView) {\n      if (!isMainPageView) {\n        if (propertyId == this.currentProperty) {\n          if (this.notificationMaster != null) {\n            this.notifyListChange.next(this.notificationMaster);\n            return;\n          }\n        }\n      }\n\n      this.currentProperty = propertyId;\n      this.getNotifications(userId, propertyId, isMainPageView).subscribe(data => {\n        if (data != null) {\n          this.notificationMaster = data;\n          this.notifyListChange.next(data);\n        }\n      });\n    }\n\n  }\n\n  NotificationService.ɵfac = function NotificationService_Factory(t) {\n    return new (t || NotificationService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  NotificationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: NotificationService,\n    factory: NotificationService.ɵfac\n  });\n  return NotificationService;\n})();","map":null,"metadata":{},"sourceType":"module"}