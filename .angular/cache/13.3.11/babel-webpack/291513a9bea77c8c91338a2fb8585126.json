{"ast":null,"code":"import { catchError } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nexport class AbstractRestService {\n  constructor(http, endPointUrl) {\n    this.http = http;\n    this.baseRestUrl = environment.apiUrl;\n\n    if (endPointUrl != null) {\n      this.baseRestUrl = endPointUrl;\n    }\n  }\n\n  getItem(url, data) {\n    return this.http.get(this.baseRestUrl + url, {\n      params: data\n    }).pipe(catchError(function (error) {\n      if (error.error instanceof ProgressEvent) {\n        return Promise.reject(`Network Error: ${error.statusText} (${error.status})`);\n      } else {\n        return Promise.reject(error.error);\n      }\n    }));\n  }\n\n  postItem(url, body) {\n    return this.http.post(this.baseRestUrl + url, body).pipe(catchError(function (error) {\n      if (error.error instanceof ProgressEvent) {\n        return Promise.reject(`Network Error: ${error.statusText} (${error.status})`);\n      } else {\n        return Promise.reject(error.error);\n      }\n    }));\n  }\n\n  putItem(url, body) {\n    return this.http.put(this.baseRestUrl + url, body).pipe(catchError(function (error) {\n      if (error.error instanceof ProgressEvent) {\n        return Promise.reject(`Network Error: ${error.statusText} (${error.status})`);\n      } else {\n        return Promise.reject(error.error);\n      }\n    }));\n  }\n\n  deleteItem(url, data) {\n    return this.http.delete(this.baseRestUrl + url, {\n      params: data\n    }).pipe(catchError(function (error) {\n      if (error.error instanceof ProgressEvent) {\n        return Promise.reject(`Network Error: ${error.statusText} (${error.status})`);\n      } else {\n        return Promise.reject(error.error);\n      }\n    }));\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}