{"ast":null,"code":"import { NavigationEnd, Router } from \"@angular/router\";\nimport { TranslateService } from \"@ngx-translate/core\";\nimport { BehaviorSubject, Subject } from \"rxjs\";\nimport { environment } from \"../../environments/environment\";\nimport { AppConstants } from \"../common/AppConstants\";\nimport { MessageDetail } from \"../model/utility.model\";\nimport { NotificationService } from \"../notification/service/notification.service\";\nimport { PropertyService } from \"../property/service/property.service\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngx-translate/core\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"../property/service/property.service\";\nimport * as i4 from \"../notification/service/notification.service\";\nexport let AppsessionService = /*#__PURE__*/(() => {\n  class AppsessionService {\n    constructor(translate, route, propService, notifyService) {\n      this.translate = translate;\n      this.route = route;\n      this.propService = propService;\n      this.notifyService = notifyService;\n      this.editItem = null;\n      this.IsUserLoggedIn = false;\n      this.LeftMenuOpen = false;\n      this.AppTitle = \"\";\n      this.JustRegistered = false;\n      this.TempUser = null;\n      this.CurrentUser = null;\n      this.defaultPageSize = 10;\n      this.defaultPageNumber = 1;\n      this.IsUserLoggedInChange = new BehaviorSubject(false);\n      this.LeftMenuOpenChange = new BehaviorSubject(false);\n      this.AppTitleChange = new Subject();\n      this.UserSessionChange = new BehaviorSubject(null);\n      this.currentUnviewdNotificationCountChange = new BehaviorSubject(0);\n      this.IsHasManageRights = false;\n      this.currentLanguage = \"en\";\n      this.HeaderInfoMsgChange = new Subject();\n      this.selectedPropertyChange = new Subject();\n      this.IsUserLoggedInChange.subscribe(value => {\n        this.IsUserLoggedIn = value;\n      });\n      this.UserSessionChange.subscribe(value => {\n        this.CurrentUser = value;\n      });\n      this.route.events.subscribe(ev => {\n        if (this.LeftMenuOpen) {\n          if (ev instanceof NavigationEnd) {\n            this.OpenLeftMenu(false);\n          }\n        }\n      });\n    }\n\n    setTranslateLang(lang) {\n      this.currentLanguage = lang;\n      this.translate.use(lang);\n    }\n\n    addToSession(key, value) {\n      sessionStorage.setItem(key, JSON.stringify(value));\n    }\n\n    getFromSession(key) {\n      let value;\n      value = JSON.parse(sessionStorage.getItem(key));\n      return value;\n    }\n\n    removeFromSession(key) {\n      sessionStorage.removeItem(key);\n    }\n\n    clearSession() {\n      sessionStorage.clear();\n    }\n\n    addToLocal(key, value) {\n      localStorage.setItem(key, JSON.stringify(value));\n    }\n\n    getFromLocal(key) {\n      let value;\n      value = JSON.parse(localStorage.getItem(key));\n      return value;\n    }\n\n    removeFromLocal(key) {\n      localStorage.removeItem(key);\n    }\n\n    clearLocal() {\n      localStorage.clear();\n    }\n\n    getCurrentUser() {\n      let sessionKey = this.getUserSessionId();\n\n      if (sessionKey != null) {\n        let cUser = this.getFromSession(sessionKey);\n        return cUser;\n      }\n\n      return null;\n    }\n\n    logOut(redirectHandled = false) {\n      this.selectedProperty = null;\n      this.IsHasManageRights = false;\n      this.propService.isPropInforAlreadyLoaded = false;\n      this.propService.propInfoList = null;\n      this.properties = null;\n      this.clearSession();\n      this.clearLocal();\n      this.IsUserLoggedIn = false;\n      this.UserSessionChange.next(null);\n      this.IsUserLoggedInChange.next(this.IsUserLoggedIn);\n      this.notifyService.notificationMaster = null;\n      this.currentUnviewdNotificationCountChange.next(0);\n\n      if (!redirectHandled) {\n        this.route.navigate([\"\"]);\n      }\n    }\n\n    redirectToRoute(routeName, queryParameter) {\n      if (routeName == null) {\n        routeName = \"\";\n      }\n\n      if (queryParameter == null) {\n        this.route.navigate([routeName]);\n      } else {\n        this.route.navigate([routeName], queryParameter);\n      }\n    }\n\n    logIn(value, rememberMe) {\n      if (value != null) {\n        this.IsHasManageRights = value.isManager;\n\n        if (rememberMe) {\n          this.addToLocal(AppConstants.SessionKeyRemember, value.userVM.email);\n        } else {\n          this.clearLocal();\n        }\n\n        this.addToSession(AppConstants.SessionKeyUser, value.userVM.loginSessionId);\n        this.addToSession(value.userVM.loginSessionId, value);\n\n        if (value.userVM.lang != null) {\n          this.setTranslateLang(value.userVM.lang);\n        }\n\n        this.IsUserLoggedIn = true;\n        this.UserSessionChange.next(value);\n        this.IsUserLoggedInChange.next(this.IsUserLoggedIn);\n      }\n    }\n\n    setGlobalHeaderMessage(msgData) {\n      if (msgData == null) {\n        msgData = new MessageDetail();\n        msgData.msg = this.getTranslated(AppConstants.Successful);\n      }\n\n      this.HeaderInfoMsgChange.next(msgData);\n    }\n\n    OpenLeftMenu(isOpen) {\n      this.LeftMenuOpen = isOpen;\n      this.LeftMenuOpenChange.next(this.LeftMenuOpen);\n    }\n\n    setIsLogIn(value, userSession) {\n      this.UserSessionChange.next(userSession);\n      this.IsUserLoggedInChange.next(value);\n    }\n\n    updateCurrentUserSession(userSession) {\n      let sessionKey = this.getUserSessionId();\n\n      if (sessionKey != null) {\n        this.addToSession(sessionKey, userSession);\n        this.UserSessionChange.next(userSession);\n      }\n    }\n\n    setSelectedProperty(currentProp) {\n      this.selectedProperty = currentProp;\n      this.selectedPropertyChange.next(currentProp);\n    }\n\n    getUserSessionId() {\n      let sessionKey = this.getFromSession(AppConstants.SessionKeyUser);\n\n      if (sessionKey != null) {\n        return sessionKey;\n      }\n\n      return null;\n    }\n\n    getUserRememberMe() {\n      return this.getFromLocal(AppConstants.SessionKeyRemember);\n    }\n\n    getTranslated(resourceKey) {\n      return this.translate.instant(resourceKey);\n    }\n\n    paginate(array, page_size, page_number) {\n      return array.slice(0, page_number * page_size);\n    }\n\n    SetAppTitle(titleKey) {\n      this.AppTitle = titleKey;\n      this.AppTitleChange.next(this.AppTitle);\n    }\n\n    getHttpErrorMessages(err) {\n      let messages = new Array();\n\n      if (typeof err === \"object\") {\n        // tslint:disable-next-line:forin\n        for (let item in err) {\n          messages.push(this.translate.instant(item));\n        }\n      } else if (typeof err === \"string\") {\n        messages.push(this.translate.instant(AppConstants.ConnectionLostError));\n      }\n\n      return messages;\n    }\n\n    setTranslateDefault() {\n      this.translate.setDefaultLang(this.currentLanguage);\n    }\n\n    getImageData(fileName, fileType, defaultUrl) {\n      if (fileName != null && fileName !== \"\") {\n        if (fileType === \"image\") {\n          return environment.azurePhotosUrl + fileName;\n        }\n      }\n\n      return defaultUrl;\n    }\n\n  }\n\n  AppsessionService.ɵfac = function AppsessionService_Factory(t) {\n    return new (t || AppsessionService)(i0.ɵɵinject(i1.TranslateService), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.PropertyService), i0.ɵɵinject(i4.NotificationService));\n  };\n\n  AppsessionService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AppsessionService,\n    factory: AppsessionService.ɵfac\n  });\n  return AppsessionService;\n})();","map":null,"metadata":{},"sourceType":"module"}